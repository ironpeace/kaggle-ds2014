data$isSingle_group_size <- NULL
data$isSingle_homeowner <- NULL
data$isSingle_car_age <- NULL
data$isSingle_car_value <- NULL
data$isSingle_risk_factor <- NULL
data$isSingle_age_oldest <- NULL
data$isSingle_age_youngest <- NULL
data$isSingle_married_couple <- NULL
data$isSingle_c_previous <- NULL
data$isSingle_duration_previous <-NULL
data$count <- NULL
data$minCost <- NULL
data$meanCost <- NULL
data$maxCost <- NULL
data$minCostPolicy <- NULL
data$maxCostPolicy <- NULL
data$evePolicy <- NULL
data$firstPolicy <- NULL
data$lastPolicy <- NULL
data$daysCount <- NULL
data$howLong <- NULL
data$howPrevPolicy <- NULL
data$finCost <- NULL
data$chgOpt <- NULL
# NAがあるとそのレコードの予測値もNAになってしまうのでチェック
length(which(is.na(data$customer_ID)))
length(which(is.na(data$day)))
length(which(is.na(data$state)))
length(which(is.na(data$location)))
length(which(is.na(data$group_size)))
length(which(is.na(data$homeowner)))
length(which(is.na(data$car_age)))
length(which(is.na(data$car_value)))
length(which(is.na(data$risk_factor)))
length(which(is.na(data$age_oldest)))
length(which(is.na(data$age_youngest)))
length(which(is.na(data$married_couple)))
length(which(is.na(data$c_previous)))
length(which(is.na(data$duration_previous)))
length(which(is.na(data$vA)))
length(which(is.na(data$vB)))
length(which(is.na(data$vC)))
length(which(is.na(data$vD)))
length(which(is.na(data$vE)))
length(which(is.na(data$vF)))
length(which(is.na(data$vG)))
length(which(is.na(data$cA)))
length(which(is.na(data$cB)))
length(which(is.na(data$cC)))
length(which(is.na(data$cD)))
length(which(is.na(data$cE)))
length(which(is.na(data$cF)))
length(which(is.na(data$cG)))
length(which(is.na(data$howChanged)))
data2 <- data
#良くないけど、とりあえずNA埋めちゃう
data2$risk_factor <- ifelse(is.na(data$risk_factor),4,data$risk_factor)
data2$c_previous <- ifelse(is.na(data$c_previous),1,data$c_previous)
states <- read.csv("states_data.csv")
data3 <- merge(x=data2, y=states, by="state")
data3 <- data2
set.seed(12345)
trainnum <- sample(1:97009, 67906)
data.train <- data3[trainnum, ]  # トレーニングデータ
validnum <- setdiff(1:97009, trainnum)
data.valid <- data3[validnum, ]  # 検証データ
data.train.4 <- data.train
data.train.4$vA <- NULL
data.train.4$vB <- NULL
data.train.4$vC <- NULL
data.train.4$vD <- NULL
data.train.4$vE <- NULL
data.train.4$vF <- NULL
data.train.4$vG <- NULL
data.train.4$cA <- NULL
data.train.4$cB <- NULL
data.train.4$cC <- NULL
data.train.4$cD <- NULL
data.train.4$cE <- NULL
data.train.4$cF <- NULL
data.train.4$cG <- NULL
data.valid.4 <- data.valid
data.valid.4$vA <- NULL
data.valid.4$vB <- NULL
data.valid.4$vC <- NULL
data.valid.4$vD <- NULL
data.valid.4$vE <- NULL
data.valid.4$vF <- NULL
data.valid.4$vG <- NULL
data.valid.4$cA <- NULL
data.valid.4$cB <- NULL
data.valid.4$cC <- NULL
data.valid.4$cD <- NULL
data.valid.4$cE <- NULL
data.valid.4$cF <- NULL
data.valid.4$cG <- NULL
data.train.isEve.rpart = rpart(as.factor(isEve)~., data=data.train.4, maxdepth=3, cp=-1)
plot(as.party(data.train.isEve.rpart))
data.train.isEve.pred = predict(data.train.isEve.rpart, newdata=data.train)
data.valid.isEve.pred = predict(data.train.isEve.rpart, newdata=data.valid)
sum(data.train$isEve) / 67906
sum((ifelse(data.train.isEve.pred[,2] > 0.6, 1, 0))) / 67906
sum((ifelse(data.train.isEve.pred[,2] > 0.7, 1, 0))) / 67906
sum((ifelse(data.train.isEve.pred[,2] > 0.61, 1, 0))) / 67906
sum((ifelse(data.train.isEve.pred[,2] > 0.62, 1, 0))) / 67906
sum((ifelse(data.train.isEve.pred[,2] > 0.65, 1, 0))) / 67906
sum((ifelse(data.train.isEve.pred[,2] > 0.63, 1, 0))) / 67906
sum((ifelse(data.train.isEve.pred[,2] > 0.62, 1, 0))) / 67906
sum((ifelse(data.train.isEve.pred[,2] > 0.6, 1, 0))) / 67906
sum((ifelse(data.valid.isEve.pred[,2] > 0.6, 1, 0))) / 29103
sum((ifelse(data.train.isEve.pred[,2] > 0.6, 1, 0) + data.train$isEve) == 2, 1, 0) / sum(data.train$isEve)
calcAR(X=data.train.isEve.pred[,2], y=data.train$isEve, TARGET="1", plotCAP=TRUE, plotpr=TRUE)
data.train.isEve.rpart = rpart(as.factor(isEve)~., data=data.train.4, maxdepth=6, cp=-1)
plot(as.party(data.train.isEve.rpart))
data.train.isEve.pred = predict(data.train.isEve.rpart, newdata=data.train)
data.valid.isEve.pred = predict(data.train.isEve.rpart, newdata=data.valid)
sum((ifelse(data.train.isEve.pred[,2] > 0.6, 1, 0))) / 67906
sum((ifelse(data.valid.isEve.pred[,2] > 0.6, 1, 0))) / 29103
sum((ifelse(data.train.isEve.pred[,2] > 0.6, 1, 0) + data.train$isEve) == 2, 1, 0) / sum(data.train$isEve)
calcAR(X=data.train.isEve.pred[,2], y=data.train$isEve, TARGET="1", plotCAP=TRUE, plotpr=TRUE)
sum((ifelse(data.valid.isEve.pred > 0.6, 1, 0) + data.valid$isEve) == 2, 1, 0) / sum(data.valid$isEve)
calcAR(X=data.valid.isEve.pred[,2], y=data.valid$isEve, TARGET="1", plotCAP=TRUE, plotpr=TRUE)
data.train.isEve.rpart = rpart(as.factor(isEve)~., data=data.train.4, maxdepth=6, cp=-1, minbucket=1000 )
plot(as.party(data.train.isEve.rpart))
data.train.isEve.pred = predict(data.train.isEve.rpart, newdata=data.train)
data.valid.isEve.pred = predict(data.train.isEve.rpart, newdata=data.valid)
sum(data.train$isEve) / 67906
sum((ifelse(data.train.isEve.pred[,2] > 0.6, 1, 0))) / 67906
sum((ifelse(data.valid.isEve.pred[,2] > 0.6, 1, 0))) / 29103
sum((ifelse(data.train.isEve.pred[,2] > 0.6, 1, 0) + data.train$isEve) == 2, 1, 0) / sum(data.train$isEve)
calcAR(X=data.train.isEve.pred[,2], y=data.train$isEve, TARGET="1", plotCAP=TRUE, plotpr=TRUE)
sum((ifelse(data.valid.isEve.pred > 0.6, 1, 0) + data.valid$isEve) == 2, 1, 0) / sum(data.valid$isEve)
calcAR(X=data.valid.isEve.pred[,2], y=data.valid$isEve, TARGET="1", plotCAP=TRUE, plotpr=TRUE)
# 以降では使わないので消しておく
data.train.4$isEve <- NULL
# オプションAを予測する
data.train.4A <- data.train.4
data.train.4A$A <- data.train$vA
# 3値以上かどうか確認
summary(as.factor(data.train.4A$A))
date()
data.train.4A.multinom <- multinom(as.factor(A)~., data = data.train.4A, MaxNWts=4000, maxit=50)
date()
data.train.4A.pred <- predict(data.train.4A.multinom, newdata=data.train.4A, type="class")
data.valid.4A.pred <- predict(data.train.4A.multinom, newdata=data.valid.4, type="class")
length(which(is.na(data.train.4A.pred)))
length(which(is.na(data.valid.4A.pred)))
sum(ifelse(data.train.4A.pred == data.train$vA, 1, 0)) / 67906
# ヒット率 0.7231173
sum(ifelse(data.valid.4A.pred == data.valid$vA, 1, 0)) / 29103
# ヒット率 0.7176236
# オプションBを予測する
data.train.4B <- data.train.4
data.train.4B$B <- data.train$vB
# 3値以上かどうか確認
summary(as.factor(data.train.4B$B))
# 2値なんだからrpartでいいじゃん
data.train.4B.rpart = rpart(as.factor(B)~., data=data.train.4B, maxdepth=3, cp=-1)
plot(as.party(data.train.4B.rpart))
data.train.4B.pred <- predict(data.train.4B.rpart, newdata=data.train.4B, type="class")
data.valid.4B.pred <- predict(data.train.4B.rpart, newdata=data.valid.4, type="class")
length(which(is.na(data.train.4B.pred)))
length(which(is.na(data.valid.4B.pred)))
sum(ifelse(data.train.4B.pred == data.train$vB, 1, 0)) / 67906
# ヒット率 0.5950137
sum(ifelse(data.valid.4B.pred == data.valid$vB, 1, 0)) / 29103
# ヒット率 0.5913823
# オプションCを予測する
data.train.4C <- data.train.4
data.train.4C$C <- data.train$vC
# 3値以上かどうか確認
summary(as.factor(data.train.4C$C))
date()
data.train.4C.multinom <- multinom(as.factor(C)~., data = data.train.4C, MaxNWts=4400, maxit=50)
date()
data.train.4C.pred <- predict(data.train.4C.multinom, newdata=data.train.4C, type="class")
data.valid.4C.pred <- predict(data.train.4C.multinom, newdata=data.valid.4, type="class")
length(which(is.na(data.train.4C.pred)))
length(which(is.na(data.valid.4C.pred)))
sum(ifelse(data.train.4C.pred == data.train$vC, 1, 0)) / 67906
# ヒット率 0.6322269
sum(ifelse(data.valid.4C.pred == data.valid$vC, 1, 0)) / 29103
# ヒット率 0.6306223
# オプションDを予測する
data.train.4D <- data.train.4
data.train.4D$D <- data.train$vD
# 3値以上かどうか確認
summary(as.factor(data.train.4D$D))
date()
data.train.4D.multinom <- multinom(as.factor(D)~., data = data.train.4D, MaxNWts=4000, maxit=50)
date()
# 15分かかる
data.train.4D.pred <- predict(data.train.4D.multinom, newdata=data.train.4D, type="class")
data.valid.4D.pred <- predict(data.train.4D.multinom, newdata=data.valid.4, type="class")
length(which(is.na(data.train.4D.pred)))
length(which(is.na(data.valid.4D.pred)))
sum(ifelse(data.train.4D.pred == data.train$vD, 1, 0)) / 67906
# ヒット率 0.6785704
sum(ifelse(data.valid.4D.pred == data.valid$vD, 1, 0)) / 29103
# ヒット率 0.6837096
# オプションEを予測する
data.train.4E <- data.train.4
data.train.4E$E <- data.train$vE
# 3値以上かどうか確認
summary(as.factor(data.train.4E$E))
# 2値なんだからrpartでいいじゃん
data.train.4E.rpart = rpart(as.factor(E)~., data=data.train.4E, maxdepth=3, cp=-1)
plot(as.party(data.train.4E.rpart))
data.train.4E.pred <- predict(data.train.4E.rpart, newdata=data.train.4E, type="class")
data.valid.4E.pred <- predict(data.train.4E.rpart, newdata=data.valid.4, type="class")
length(which(is.na(data.train.4E.pred)))
length(which(is.na(data.valid.4E.pred)))
sum(ifelse(data.train.4E.pred == data.train$vE, 1, 0)) / 67906
# ヒット率 0.6641534
sum(ifelse(data.valid.4E.pred == data.valid$vE, 1, 0)) / 29103
# ヒット率 0.6665292
# オプションFを予測する
data.train.4F <- data.train.4
data.train.4F$F <- data.train$vF
# 3値以上かどうか確認
summary(as.factor(data.train.4F$F))
date()
data.train.4F.multinom <- multinom(as.factor(F)~., data = data.train.4F, MaxNWts=4400, maxit=50)
date()
data.train.4F.pred <- predict(data.train.4F.multinom, newdata=data.train.4F, type="class")
data.valid.4F.pred <- predict(data.train.4F.multinom, newdata=data.valid.4, type="class")
length(which(is.na(data.train.4F.pred)))
length(which(is.na(data.valid.4F.pred)))
sum(ifelse(data.train.4F.pred == data.train$vF, 1, 0)) / 67906
# ヒット率 0.6159544
sum(ifelse(data.valid.4F.pred == data.valid$vF, 1, 0)) / 29103
# ヒット率 0.6184586
# オプションGを予測する
data.train.4G <- data.train.4
data.train.4G$G <- data.train$vG
# 3値以上かどうか確認
summary(as.factor(data.train.4G$G))
date()
data.train.4G.multinom <- multinom(as.factor(G)~., data = data.train.4G, MaxNWts=4400, maxit=50)
date()
data.train.4G.pred <- predict(data.train.4G.multinom, newdata=data.train.4G, type="class")
data.valid.4G.pred <- predict(data.train.4G.multinom, newdata=data.valid.4, type="class")
length(which(is.na(data.train.4G.pred)))
length(which(is.na(data.valid.4G.pred)))
sum(ifelse(data.train.4G.pred == data.train$vG, 1, 0)) / 67906
# ヒット率 0.597473
sum(ifelse(data.valid.4G.pred == data.valid$vG, 1, 0)) / 29103
# ヒット率 0.5904202
data.train.plan <- paste(data.train$vA,data.train$vB,data.train$vC,data.train$vD,data.train$vE,data.train$vF,data.train$vG,sep="")
data.train.plan.pred <- paste(data.train.4A.pred,data.train.4B.pred,data.train.4C.pred,data.train.4D.pred,data.train.4E.pred,data.train.4F.pred,data.train.4G.pred,sep="")
sum(ifelse(data.train.plan == data.train.plan.pred, 1, 0)) / 67906
# ヒット率 0.05183636
data.valid.plan <- paste(data.valid$vA,data.valid$vB,data.valid$vC,data.valid$vD,data.valid$vE,data.valid$vF,data.valid$vG, sep="")
data.valid.plan.pred <- paste(data.valid.4A.pred,data.valid.4B.pred,data.valid.4C.pred,data.valid.4D.pred,data.valid.4E.pred,data.valid.4F.pred,data.valid.4G.pred, sep="")
sum(ifelse(data.valid.plan == data.valid.plan.pred, 1, 0)) / 29103
# ヒット率 0.05281242
# ヒット率低すぎる…
#ひとまずファイル出力しておく
write.csv(data.train.plan.pred, "data.train.plan.pred_20140422_1.csv")
write.csv(data.valid.plan.pred, "data.valid.plan.pred_20140422_1.csv")
# ヒット率低すぎたけど、ニアミスが多いのではないかと想定して、ニアミス度合いを確認する
data.train.4A.pred.wrong <- ifelse(data.train.4A.pred != data.train$vA, 1, 0)
data.train.4B.pred.wrong <- ifelse(data.train.4B.pred != data.train$vB, 1, 0)
data.train.4C.pred.wrong <- ifelse(data.train.4C.pred != data.train$vC, 1, 0)
data.train.4D.pred.wrong <- ifelse(data.train.4D.pred != data.train$vD, 1, 0)
data.train.4E.pred.wrong <- ifelse(data.train.4E.pred != data.train$vE, 1, 0)
data.train.4F.pred.wrong <- ifelse(data.train.4F.pred != data.train$vF, 1, 0)
data.train.4G.pred.wrong <- ifelse(data.train.4G.pred != data.train$vG, 1, 0)
data.train.pred.howWrong <- data.train.4A.pred.wrong +
data.train.4B.pred.wrong +
data.train.4C.pred.wrong +
data.train.4D.pred.wrong +
data.train.4E.pred.wrong +
data.train.4F.pred.wrong +
data.train.4G.pred.wrong
hist(data.train.pred.howWrong)
pie(table(data.train.pred.howWrong))
sum(ifelse(data.train.pred.howWrong < 3,1,0)) / 67906
# 0.5307631
# ２個間違え以下が半数なので、やはり結構ニアミスしていると言える。
data.valid.4A.pred.wrong <- ifelse(data.valid.4A.pred != data.valid$vA, 1, 0)
data.valid.4B.pred.wrong <- ifelse(data.valid.4B.pred != data.valid$vB, 1, 0)
data.valid.4C.pred.wrong <- ifelse(data.valid.4C.pred != data.valid$vC, 1, 0)
data.valid.4D.pred.wrong <- ifelse(data.valid.4D.pred != data.valid$vD, 1, 0)
data.valid.4E.pred.wrong <- ifelse(data.valid.4E.pred != data.valid$vE, 1, 0)
data.valid.4F.pred.wrong <- ifelse(data.valid.4F.pred != data.valid$vF, 1, 0)
data.valid.4G.pred.wrong <- ifelse(data.valid.4G.pred != data.valid$vG, 1, 0)
data.valid.pred.howWrong <- data.valid.4A.pred.wrong +
data.valid.4B.pred.wrong +
data.valid.4C.pred.wrong +
data.valid.4D.pred.wrong +
data.valid.4E.pred.wrong +
data.valid.4F.pred.wrong +
data.valid.4G.pred.wrong
hist(data.valid.pred.howWrong)
pie(table(data.valid.pred.howWrong))
sum(ifelse(data.valid.pred.howWrong < 3,1,0)) / 29103
# 0.5313198
# validを見ても同様のことが言える。
# 間違ったオプションが、もし顧客にとって悩んでいないオプションであれば、
# テストデータの最初のオプションを採用してしまえばいいよね？という仮説を立ててみる
# 間違ったものが、顧客の悩み対象オプションじゃないかどうかを調べる
# 予測が間違ったもののうち、オプション変更していない顧客がどれだけいるか
sum(ifelse((data.train.4A.pred.wrong + ifelse(data.train$cA == 0, 1, 0)) == 2, 1, 0)) / sum(data.train.4A.pred.wrong)
sum(ifelse((data.train.4B.pred.wrong + ifelse(data.train$cB == 0, 1, 0)) == 2, 1, 0)) / sum(data.train.4B.pred.wrong)
sum(ifelse((data.train.4C.pred.wrong + ifelse(data.train$cC == 0, 1, 0)) == 2, 1, 0)) / sum(data.train.4C.pred.wrong)
sum(ifelse((data.train.4D.pred.wrong + ifelse(data.train$cD == 0, 1, 0)) == 2, 1, 0)) / sum(data.train.4D.pred.wrong)
sum(ifelse((data.train.4E.pred.wrong + ifelse(data.train$cE == 0, 1, 0)) == 2, 1, 0)) / sum(data.train.4E.pred.wrong)
sum(ifelse((data.train.4F.pred.wrong + ifelse(data.train$cF == 0, 1, 0)) == 2, 1, 0)) / sum(data.train.4F.pred.wrong)
sum(ifelse((data.train.4G.pred.wrong + ifelse(data.train$cG == 0, 1, 0)) == 2, 1, 0)) / sum(data.train.4G.pred.wrong)
# 40% 〜 60% が該当。
sum(ifelse((data.valid.4A.pred.wrong + ifelse(data.valid$cA == 0, 1, 0)) == 2, 1, 0)) / sum(data.valid.4A.pred.wrong)
sum(ifelse((data.valid.4B.pred.wrong + ifelse(data.valid$cB == 0, 1, 0)) == 2, 1, 0)) / sum(data.valid.4B.pred.wrong)
sum(ifelse((data.valid.4C.pred.wrong + ifelse(data.valid$cC == 0, 1, 0)) == 2, 1, 0)) / sum(data.valid.4C.pred.wrong)
sum(ifelse((data.valid.4D.pred.wrong + ifelse(data.valid$cD == 0, 1, 0)) == 2, 1, 0)) / sum(data.valid.4D.pred.wrong)
sum(ifelse((data.valid.4E.pred.wrong + ifelse(data.valid$cE == 0, 1, 0)) == 2, 1, 0)) / sum(data.valid.4E.pred.wrong)
sum(ifelse((data.valid.4F.pred.wrong + ifelse(data.valid$cF == 0, 1, 0)) == 2, 1, 0)) / sum(data.valid.4F.pred.wrong)
sum(ifelse((data.valid.4G.pred.wrong + ifelse(data.valid$cG == 0, 1, 0)) == 2, 1, 0)) / sum(data.valid.4G.pred.wrong)
# valid も 40% 〜 70% が該当。
# ここで作戦を整理。
# 1. まずは直前見積もり採用モデルで予測する
# 2. 各オプションの予測モデルを作る（なるべく精度を挙げて行く）
# 3. 悩んでいないオプションであれば、予測モデルは使わない
# 4. 悩んでいるオプションであれば、予測モデルを使う
# 悩んでいるオプションであれば予測モデルを使い、そうでなければ今のをそのまま使う
data.train.4A.final <- ifelse(data.train$cA == 0, data.train$vA, data.train.4A.pred)
data.train.4B.final <- ifelse(data.train$cB == 0, data.train$vB, data.train.4B.pred)
data.train.4C.final <- ifelse(data.train$cC == 0, data.train$vC, data.train.4C.pred)
data.train.4D.final <- ifelse(data.train$cD == 0, data.train$vD, data.train.4D.pred)
data.train.4E.final <- ifelse(data.train$cE == 0, data.train$vE, data.train.4E.pred)
data.train.4F.final <- ifelse(data.train$cF == 0, data.train$vF, data.train.4F.pred)
data.train.4G.final <- ifelse(data.train$cG == 0, data.train$vG, data.train.4G.pred)
# オプションを合体
data.train.plan.pred.retry <- paste(data.train.4A.final,
data.train.4B.final,
data.train.4C.final,
data.train.4D.final,
data.train.4E.final,
data.train.4F.final,
data.train.4G.final,
sep="")
sum(ifelse(data.train.plan == data.train.plan.pred.retry, 1, 0)) / 67906
# 0.2717138
# ヒット率上がった。
# 悩んでいるオプションであれば予測モデルを使い、そうでなければ今のをそのまま使う
data.valid.4A.final <- ifelse(data.valid$cA == 0, data.valid$vA, data.valid.4A.pred)
data.valid.4B.final <- ifelse(data.valid$cB == 0, data.valid$vB, data.valid.4B.pred)
data.valid.4C.final <- ifelse(data.valid$cC == 0, data.valid$vC, data.valid.4C.pred)
data.valid.4D.final <- ifelse(data.valid$cD == 0, data.valid$vD, data.valid.4D.pred)
data.valid.4E.final <- ifelse(data.valid$cE == 0, data.valid$vE, data.valid.4E.pred)
data.valid.4F.final <- ifelse(data.valid$cF == 0, data.valid$vF, data.valid.4F.pred)
data.valid.4G.final <- ifelse(data.valid$cG == 0, data.valid$vG, data.valid.4G.pred)
# オプションを合体
data.valid.plan.pred.retry <- paste(data.valid.4A.final,
data.valid.4B.final,
data.valid.4C.final,
data.valid.4D.final,
data.valid.4E.final,
data.valid.4F.final,
data.valid.4G.final,
sep="")
sum(ifelse(data.valid.plan == data.valid.plan.pred.retry, 1, 0)) / 29103
# 0.2698347
# validでも上がった。
# トータルでのモデル適用をやってみる
answer.train <- data.frame(customer_ID=data.train$customer_ID)
# 直前見積もりplanを作成
data.train.plan.eve <- paste(data.train$vA, data.train$vB, data.train$vC,
data.train$vD, data.train$vE, data.train$vF,
data.train$vG, sep="")
# 直前見積もり予測先であれば、直前見積もりplanを採用し、さもなければオプション毎予測モデルを適用
answer.train$plan <- ifelse(data.train.isEve.pred[,2] > 0.6, data.train.plan.eve, data.train.plan.pred.retry)
sum(ifelse(data.train.plan == answer.train$plan, 1, 0)) / 67906
# 0.7377257
# validデータでもやってみる
answer.valid <- data.frame(customer_ID=data.valid$customer_ID)
# 直前見積もりplanを作成
data.valid.plan.eve <- paste(data.valid$vA, data.valid$vB, data.valid$vC,
data.valid$vD, data.valid$vE, data.valid$vF,
data.valid$vG, sep="")
# 直前見積もり予測先であれば、直前見積もりplanを採用し、さもなければオプション毎予測モデルを適用
answer.valid$plan <- ifelse(data.valid.isEve.pred[,2] > 0.6, data.valid.plan.eve, data.valid.plan.pred.retry)
sum(ifelse(data.valid.plan == answer.valid$plan, 1, 0)) / 29103
# 0.7351132
test <- read.csv("groups.test.csv")
test$isSingle_state <- NULL
test$isSingle_location <- NULL
test$isSingle_group_size <- NULL
test$isSingle_homeowner <- NULL
test$isSingle_car_age <- NULL
test$isSingle_car_value <- NULL
test$isSingle_risk_factor <- NULL
test$isSingle_age_oldest <- NULL
test$isSingle_age_youngest <- NULL
test$isSingle_married_couple <- NULL
test$isSingle_c_previous <- NULL
test$isSingle_duration_previous <-NULL
test$count <- NULL
test$minCost <- NULL
test$meanCost <- NULL
test$maxCost <- NULL
test$minCostPolicy <- NULL
test$maxCostPolicy <- NULL
test$evePolicy <- NULL
test$firstPolicy <- NULL
test$lastPolicy <- NULL
test$daysCount <- NULL
test$howLong <- NULL
test$howPrevPolicy <- NULL
test$finCost <- NULL
test$chgOpt <- NULL
length(which(is.na(test$customer_ID)))
length(which(is.na(test$day)))
length(which(is.na(test$state)))
length(which(is.na(test$location))) # NA有
length(which(is.na(test$group_size)))
length(which(is.na(test$homeowner)))
length(which(is.na(test$car_age)))
length(which(is.na(test$car_value)))
length(which(is.na(test$risk_factor))) # NA有
length(which(is.na(test$age_oldest)))
length(which(is.na(test$age_youngest)))
length(which(is.na(test$age_oldest)))
length(which(is.na(test$married_couple)))
length(which(is.na(test$c_previous)))
length(which(is.na(test$duration_previous)))
length(which(is.na(test$vA)))
length(which(is.na(test$vB)))
length(which(is.na(test$vC)))
length(which(is.na(test$vD)))
length(which(is.na(test$vE)))
length(which(is.na(test$vF)))
length(which(is.na(test$vG)))
length(which(is.na(test$cA)))
length(which(is.na(test$cB)))
length(which(is.na(test$cC)))
length(which(is.na(test$cD)))
length(which(is.na(test$cE)))
length(which(is.na(test$cF)))
length(which(is.na(test$cG)))
length(which(is.na(test$howChanged)))
#良くないけど、とりあえずNA埋めちゃう
test$risk_factor <- ifelse(is.na(test$risk_factor),4,test$risk_factor)
test$c_previous <- ifelse(is.na(test$c_previous),1,test$c_previous)
test$location <- ifelse(is.na(test$location),11179,test$location)
# car_value が空のところがあるので、一旦適当な値で埋める
summary(as.factor(test$car_value))
length(which(is.na(data$car_value)))
sum(ifelse(test$car_value=="",1,0))
test$car_value <- replace(test$car_value, which(test$car_value==""), "e")
summary(as.factor(test$car_value))
# 直前見積もり予測モデルを適用
test.isEve.pred = predict(data.train.isEve.rpart, newdata=test)
test.4 <- test
test.4$vA <- NULL
test.4$vB <- NULL
test.4$vC <- NULL
test.4$vD <- NULL
test.4$vE <- NULL
test.4$vF <- NULL
test.4$vG <- NULL
test.4$cA <- NULL
test.4$cB <- NULL
test.4$cC <- NULL
test.4$cD <- NULL
test.4$cE <- NULL
test.4$cF <- NULL
test.4$cG <- NULL
test.4A <- test.4
test.4A$A <- test$vA
test.4A.pred <- predict(data.train.4A.multinom, newdata=test.4A, type="class")
length(which(is.na(test.4A.pred)))
test.4B <- test.4
test.4B$B <- test$vB
test.4B.pred <- predict(data.train.4B.rpart, newdata=test.4B, type="class")
length(which(is.na(test.4B.pred)))
test.4C <- test.4
test.4C$C <- test$vC
test.4C.pred <- predict(data.train.4C.multinom, newdata=test.4C, type="class")
length(which(is.na(test.4C.pred)))
test.4D <- test.4
test.4D$D <- test$vD
test.4D.pred <- predict(data.train.4D.multinom, newdata=test.4D, type="class")
length(which(is.na(test.4D.pred)))
test.4E <- test.4
test.4E$E <- test$vE
test.4E.pred <- predict(data.train.4E.rpart, newdata=test.4E, type="class")
length(which(is.na(test.4E.pred)))
test.4F <- test.4
test.4F$F <- test$vF
test.4F.pred <- predict(data.train.4F.multinom, newdata=test.4F, type="class")
length(which(is.na(test.4F.pred)))
test.4G <- test.4
test.4G$G <- test$vG
test.4G.pred <- predict(data.train.4G.multinom, newdata=test.4G, type="class")
length(which(is.na(test.4G.pred)))
# 悩んでいるオプションであれば予測モデルを使い、そうでなければ今のをそのまま使う
test.4A.final <- ifelse(test$cA == 0, test$vA, test.4A.pred)
test.4B.final <- ifelse(test$cB == 0, test$vB, test.4B.pred)
test.4C.final <- ifelse(test$cC == 0, test$vC, test.4C.pred)
test.4D.final <- ifelse(test$cD == 0, test$vD, test.4D.pred)
test.4E.final <- ifelse(test$cE == 0, test$vE, test.4E.pred)
test.4F.final <- ifelse(test$cF == 0, test$vF, test.4F.pred)
test.4G.final <- ifelse(test$cG == 0, test$vG, test.4G.pred)
test.plan.pred.retry <- paste(test.4A.final, test.4B.final, test.4C.final,
test.4D.final, test.4E.final, test.4F.final,
test.4G.final, sep="")
test.plan.eve <- paste(test$vA, test$vB, test$vC, test$vD, test$vE, test$vF, test$vG, sep="")
# 直前見積もり予測先であれば、直前見積もりplanを採用し、さもなければオプション毎予測モデルを適用
answer.test <- data.frame(customer_ID=test$customer_ID)
answer.test$plan <- ifelse(test.isEve.pred[,2] > 0.6, test.plan.eve, test.plan.pred.retry)
write.csv(answer.test, "answer_20140423_2.csv", quote=FALSE, row.names=FALSE)
